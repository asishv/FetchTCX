using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FetchTcx
{
    //Details unused

    public class SystemConfiguration
    {
        public string DeviceName;
        public string Firmware;
        public int WaypointCount;
        public int PcRouteCount;
        public SystemConfiguration(string deviceName, string firmware,
            int waypointCount, int pcRouteCount)
        {
            this.DeviceName = deviceName;
            this.Firmware = firmware;
            this.WaypointCount = waypointCount;
            this.PcRouteCount = pcRouteCount;
        }
    }
 

    public abstract class Packet : PacketBase
    {
 
        public Packet GetWhoAmI()
        {
            InitPacket(CommandWhoAmI, 0);
            return this;
        }

        public Packet GetSystemInformation()
        {
            InitPacket(CommandGetSystemInformation, 0);
            return this;
        }

        public Packet GetSystemConfiguration()
        {
            InitPacket(CommandGetSystemConfiguration, 0);
            return this;
        }

        public virtual Packet SetSystemConfiguration2(byte[] data)
        {
            InitPacket(CommandSetSystemConfiguration, (Int16)data.Length);
            
            for (int i = 0; i < data.Length; i++)
            {
                this.PacketData[i] = data[i];
            }
            return this;
        }
        
        public virtual Packet GetScreenshot()
        {
            InitPacket(CommandGetScreenshot, 0);
            return this;
        }

        public Packet GetTrackFileHeaders()
        {
            InitPacket(CommandGetTrackFileHeaders, 0);
            return this;
        }

        public Packet GetNextTrackSection()
        {
            InitPacket(CommandGetNextTrackSection, 0);
            return this;
        } 

        public Packet GetTrackFileSections(IList<Int16> trackPointIndexes)
        {
            Int16 totalLength = (Int16)(2 + trackPointIndexes.Count * 2);
            this.InitPacket(CommandGetTrackFileSections, totalLength);
            this.Write(0, (Int16)trackPointIndexes.Count);
            int offset = 2;
            foreach (Int16 index in trackPointIndexes)
            {
                this.Write(offset, index);
                offset += 2;
            }
            return this;
        }

        public Packet GetDeleteAllTracks()
        {
            InitPacket(CommandDeleteTracks, 2);
            //Note: Seem to always be bigendian in spec?
            this.Write(0, (Int16)0x64, false);
            return this;
        }


        public virtual SystemConfiguration ResponseGetSystemConfiguration()
        {
            string deviceName = ByteArr2String(0, 20 + 1);
            string firmware = ByteArr2String(25, 16 + 1); //21wo version
            int waypointCount = 0;
            int pcRouteCount = 0;
            if (this.PacketLength > this.SystemConfigWaypointCountOffset)
            {
                waypointCount = (int)PacketData[this.SystemConfigWaypointCountOffset];
                pcRouteCount = (int)PacketData[this.SystemConfigPcRouteCountOffset];
            }

            SystemConfiguration systemInfo = new SystemConfiguration(deviceName, firmware, waypointCount, pcRouteCount);
            return systemInfo;
        } 


        //For autogenerated names

        protected static int sendIdentification = 0;

        //Packetsizes

        protected virtual int LocationLength { get { return 18 + WptLatLonOffset; } }

        protected virtual int WptLatLonOffset { get { return 0; } }

        protected virtual int RoutePointOffset { get { return 0; } }



        public virtual int TrackPointsPerSection { get { return 136; } }

        //Unused: public virtual int TrackLapsPerSection { get { return 58; } }

        protected virtual int TrackHeaderLength { get { return 24; } }

        protected virtual int TrainDataHeaderLength { get { return 31; } }

        protected virtual int TrackLapLength { get { return 22; } }

        protected virtual int TrackPointLength { get { return 25; } }

        protected virtual int TrainHeaderCTypeOffset { get { return TrackHeaderLength - 1; } } //cDataType



        protected virtual int SystemConfigWaypointCountOffset { get { return 63; } } //54 in 505?

        protected virtual int SystemConfigPcRouteCountOffset { get { return 70; } } //63 in 505?



        protected virtual int MaxRouteNameLength { get { return 15; } }

        protected virtual int RouteWaypointLength { get { return 8; } }

        public virtual byte GetTrainContent()
        {
            return this.PacketData[TrainHeaderCTypeOffset];
        }

        public abstract IList<TrackFileHeader> UnpackTrackHeaders();

        public abstract Train UnpackTrainHeader();

        public abstract IList<Lap> UnpackLaps();

        public abstract IList<TrackPoint> UnpackTrackPoints(); 

    }
}
